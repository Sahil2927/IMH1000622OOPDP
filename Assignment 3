// QUESTION 1

import java.util.Scanner;

public class ShapeCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Choose a shape (rectangle/circle/square): ");
        String shape = scanner.nextLine();

        switch (shape.toLowerCase()) {
            case "rectangle":
                System.out.print("Enter length: ");
                double length = scanner.nextDouble();
                System.out.print("Enter width: ");
                double width = scanner.nextDouble();
                System.out.println("Area: " + calculateArea(length, width));
                System.out.println("Perimeter: " + calculatePerimeter(length, width));
                break;

            case "circle":
                System.out.print("Enter radius: ");
                double radius = scanner.nextDouble();
                System.out.println("Area: " + calculateArea(radius));
                System.out.println("Circumference: " + calculateCircumference(radius));
                break;

            case "square":
                System.out.print("Enter side length: ");
                double side = scanner.nextDouble();
                System.out.println("Area: " + calculateArea(side));
                System.out.println("Perimeter: " + calculatePerimeter(side));
                break;

            default:
                System.out.println("Invalid shape.");
        }
    }

    // Method overloading for rectangle
    private static double calculateArea(double length, double width) {
        return length * width;
    }

    private static double calculatePerimeter(double length, double width) {
        return 2 * (length + width);
    }

    // Method overloading for circle
    private static double calculateArea(double radius) {
        return Math.PI * Math.pow(radius, 2);
    }

    private static double calculateCircumference(double radius) {
        return 2 * Math.PI * radius;
    }

    // Method overloading for square
    private static double calculateArea(double side) {
        return Math.pow(side, 2);
    }

    private static double calculatePerimeter(double side) {
        return 4 * side;
    }
}


// QUESTION 2

import java.util.Scanner;

public class BankUserValidator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input and validate user name
        System.out.print("Enter your name: ");
        String name = scanner.nextLine();
        if (isValidName(name)) {
            System.out.println("Name is valid.");
        } else {
            System.out.println("Invalid name. Please enter alphabets only.");
            return;
        }

        // Input and validate user age
        System.out.print("Enter your age: ");
        int age = scanner.nextInt();
        if (isValidAge(age)) {
            System.out.println("Age is valid.");
        } else {
            System.out.println("Invalid age. Please enter an age greater than 3 and less than 15.");
        }
    }

    // Method overloading for validating name
    private static boolean isValidName(String name) {
        return name.matches("[a-zA-Z]+");
    }

    // Method overloading for validating age
    private static boolean isValidAge(int age) {
        return age > 3 && age < 15;
    }
}


// QUESTION 3

public class Lab3Question3
 {

    public static void main(String[] args) {
        displayTotalArguments(10, 20, 30, 40);

        int maxNumber = findMaximum(15, 8, 25, 4, 18);
        System.out.println("Maximum number: " + maxNumber);

        int sum = calculateSum(5, 10, 15, 20);
        System.out.println("Sum of elements: " + sum);

        checkDifferentTypes("Hello", 42, 3.14, true);
    }

    private static void displayTotalArguments(int... numbers) {
        System.out.println("Total number of arguments: " + numbers.length);
    }

    private static int findMaximum(int... numbers) {
        if (numbers.length == 0) {
            throw new IllegalArgumentException("No numbers provided");
        }

        int max = numbers[0];
        for (int num : numbers) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }

    private static int calculateSum(int... numbers) {
        int sum = 0;
        for (int num : numbers) {
            sum += num;
        }
        return sum;
    }

    private static void checkDifferentTypes(Object... args) {
        System.out.println("Number of arguments with different types: " + args.length);
        for (Object arg : args) {
            System.out.println("Type: " + arg.getClass().getSimpleName() + ", Value: " + arg);
        }
    }
}


// QUESTION 4

import java.util.Scanner;

public class Lab3Question4 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a string: ");
        String inputString = scanner.nextLine();
        String lowercaseString = convertToLowerCase(inputString);
        System.out.println("String in lowercase: " + lowercaseString);

        displayStringLength(inputString);

        scanner.close();
    }

    private static String convertToLowerCase(String str) {
        return str.toLowerCase();
    }

    private static void displayStringLength(String str) {
        System.out.println("Total length of the string: " + str.length());
    }
}


// QUESTION 5

public class Lab3Question5 {

    public static void main(String[] args) {
        int[] numbers = { 23, 56, 12, 78, 41 };

        int sum = calculateSum(numbers);

        displaySumInReverse(sum);
    }

    private static int calculateSum(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        return sum;
    }

    private static void displaySumInReverse(int number) {
        System.out.print("Sum in reverse order: ");
        String reversedSum = new StringBuilder(String.valueOf(number)).reverse().toString();
        int reversedNumber = Integer.parseInt(reversedSum);
        System.out.println(reversedNumber);
    }
}


// QUESTION 6

public class Lab2Question6 {

    public static void main(String[] args) {
        TypePromotionDemo demo = new TypePromotionDemo();

        demo.displayValue(10);        
        demo.displayValue(25.5f);     
        demo.displayValue(35L);       
        demo.displayValue("Hello");   


    }

    private void displayValue(int x) {
        System.out.println("Method with int parameter: " + x);
    }

    private void displayValue(float x) {
        System.out.println("Method with float parameter: " + x);
    }

    private void displayValue(long x) {
        System.out.println("Method with long parameter: " + x);
    }

    private void displayValue(String str) {
        System.out.println("Method with String parameter: " + str);
    }
}
