// Question 1

import java.util.Scanner;

public class ArrayExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the array: ");
        int sizeOfArray = scanner.nextInt();

        int[] arrayElements = new int[sizeOfArray];

        for (int i = 0; i < sizeOfArray; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            arrayElements[i] = scanner.nextInt();
        }

        int numberOfElements = arrayElements.length;

        System.out.print("The array you entered is: ");
        for (int element : arrayElements) {
            System.out.print(element + " ");
        }

        System.out.println("\nSize of the array: " + sizeOfArray);
        System.out.println("Number of elements in the array: " + numberOfElements);
    }
}


// QUESTION 2

import java.util.Scanner;
import java.util.Arrays;

public class ArrayInsertion {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get array size from the user
        System.out.print("Enter the size of the array: ");
        int sizeOfArray = scanner.nextInt();

        int[] arrayElements = new int[sizeOfArray];

        // Get array elements from the user
        for (int i = 0; i < sizeOfArray; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            arrayElements[i] = scanner.nextInt();
        }

        // Display the original array
        System.out.println("Original array: " + Arrays.toString(arrayElements));

        // Get position and element for insertion
        System.out.print("Enter the position for insertion: ");
        int position = scanner.nextInt();

        System.out.print("Enter the element to be inserted: ");
        int element = scanner.nextInt();

        // Perform insertion
        if (position >= 1 && position <= sizeOfArray + 1) {
            // Create a new array to accommodate the inserted element
            int[] newArray = new int[sizeOfArray + 1];

            // Copy elements before the insertion position
            System.arraycopy(arrayElements, 0, newArray, 0, position - 1);

            // Insert the new element
            newArray[position - 1] = element;

            // Copy elements after the insertion position
            System.arraycopy(arrayElements, position - 1, newArray, position, sizeOfArray - position + 1);

            // Display the updated array
            System.out.println("Array after insertion: " + Arrays.toString(newArray));
        } else {
            System.out.println("Invalid position for insertion.");
        }
    }
}


// QUESTION 3

import java.util.Scanner;
import java.util.Arrays;

public class ArrayDeletion {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get array size and total elements from the user
        System.out.print("Enter the size of the array: ");
        int sizeOfArray = scanner.nextInt();

        int[] arrayElements = new int[sizeOfArray];

        // Get array elements from the user
        for (int i = 0; i < sizeOfArray; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            arrayElements[i] = scanner.nextInt();
        }

        // Display the original array
        System.out.println("Original array: " + Arrays.toString(arrayElements));

        // Get the index position for deletion
        System.out.print("Enter the index position for deletion: ");
        int loc = scanner.nextInt();

        // Perform deletion
        if (loc >= 1 && loc <= sizeOfArray) {
            // Create a new array to accommodate the deleted element
            int[] newArray = new int[sizeOfArray - 1];

            // Copy elements before the deletion position
            System.arraycopy(arrayElements, 0, newArray, 0, loc - 1);

            // Copy elements after the deletion position
            System.arraycopy(arrayElements, loc, newArray, loc - 1, sizeOfArray - loc);

            // Display the updated array
            System.out.println("Array after deletion: " + Arrays.toString(newArray));
        } else {
            System.out.println("Invalid index position for deletion.");
        }
    }
}


// QUESTION 4

import java.util.Scanner;

public class ArraySearch {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get array size from the user
        System.out.print("Enter the size of the array: ");
        int sizeOfArray = scanner.nextInt();

        int[] arrayElements = new int[sizeOfArray];

        // Get array elements from the user
        for (int i = 0; i < sizeOfArray; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            arrayElements[i] = scanner.nextInt();
        }

        // Display the original array
        System.out.print("Original array: ");
        for (int element : arrayElements) {
            System.out.print(element + " ");
        }

        // Get the element to be searched
        System.out.print("\nEnter the element to be searched: ");
        int searchElement = scanner.nextInt();

        // Perform search
        boolean found = false;
        for (int i = 0; i < sizeOfArray; i++) {
            if (arrayElements[i] == searchElement) {
                found = true;
                System.out.println("Element found at index " + i);
                break;
            }
        }

        if (!found) {
            System.out.println("Element not found in the array.");
        }
    }
}

// QUESTION 5

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class DuplicateElements {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get array size from the user
        System.out.print("Enter the size of the array: ");
        int sizeOfArray = scanner.nextInt();

        int[] arrayElements = new int[sizeOfArray];

        // Get array elements from the user
        for (int i = 0; i < sizeOfArray; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            arrayElements[i] = scanner.nextInt();
        }

        // Display the original array
        System.out.print("Original array: ");
        for (int element : arrayElements) {
            System.out.print(element + " ");
        }

        // Use a HashMap to store element frequencies
        Map<Integer, Integer> elementFrequencyMap = new HashMap<>();

        // Find and print duplicate elements with their frequency
        System.out.println("\nDuplicate elements and their frequency of occurrence:");

        for (int element : arrayElements) {
            elementFrequencyMap.put(element, elementFrequencyMap.getOrDefault(element, 0) + 1);
        }

        for (Map.Entry<Integer, Integer> entry : elementFrequencyMap.entrySet()) {
            if (entry.getValue() > 1) {
                System.out.println("Element " + entry.getKey() + ": " + entry.getValue() + " times");
            }
        }
    }
}


// QUESTION 6

import java.util.Scanner;

public class SeparateEvenOddArrays {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get array size from the user
        System.out.print("Enter the size of the array: ");
        int sizeOfArray = scanner.nextInt();

        int[] originalArray = new int[sizeOfArray];
        int[] evenArray, oddArray;
        int evenCount = 0, oddCount = 0;

        // Get array elements from the user
        System.out.println("Enter array elements:");
        for (int i = 0; i < sizeOfArray; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            originalArray[i] = scanner.nextInt();
        }

        // Determine the size of even and odd arrays
        for (int num : originalArray) {
            if (num % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }

        // Initialize even and odd arrays
        evenArray = new int[evenCount];
        oddArray = new int[oddCount];

        // Populate even and odd arrays
        int evenIndex = 0, oddIndex = 0;
        for (int num : originalArray) {
            if (num % 2 == 0) {
                evenArray[evenIndex++] = num;
            } else {
                oddArray[oddIndex++] = num;
            }
        }

        // Display the original array
        System.out.print("\nOriginal array: ");
        for (int element : originalArray) {
            System.out.print(element + " ");
        }

        // Display the even array
        System.out.print("\nEven array: ");
        for (int element : evenArray) {
            System.out.print(element + " ");
        }

        // Display the odd array
        System.out.print("\nOdd array: ");
        for (int element : oddArray) {
            System.out.print(element + " ");
        }
    }
}


// QUESTION 7

import java.util.Scanner;

public class CombinedOperations {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input the number of elements in the array
        System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();

        // Input the elements of the array
        int[] originalArray = new int[n];
        System.out.println("Enter the elements of the array in a random order:");
        for (int i = 0; i < n; i++) {
            originalArray[i] = scanner.nextInt();
        }

        // Create arrays for even and odd numbers
        int[] evenArray = new int[n];
        int evenCount = 0;
        int[] oddArray = new int[n];
        int oddCount = 0;

        for (int i = 0; i < n; i++) {
            if (originalArray[i] % 2 == 0) {
                evenArray[evenCount++] = originalArray[i];
            } else {
                oddArray[oddCount++] = originalArray[i];
            }
        }

        // Display original, even, and odd arrays
        System.out.println("\nOriginal Array:");
        displayArray(originalArray, n);

        System.out.println("\nEven Numbers Array:");
        displayArray(evenArray, evenCount);

        System.out.println("\nOdd Numbers Array:");
        displayArray(oddArray, oddCount);

        // Input the position to divide the array
        System.out.print("Enter the position to divide the array: ");
        int position = scanner.nextInt();

        // Check if the position is valid
        if (position < 0 || position >= n) {
            System.out.println("Invalid position. Please enter a valid position.");
            return;
        }

        // Divide the array into two parts
        int[] firstPart = new int[position];
        int[] secondPart = new int[n - position];

        for (int i = 0; i < position; i++) {
            firstPart[i] = originalArray[i];
        }

        for (int i = position; i < n; i++) {
            secondPart[i - position] = originalArray[i];
        }

        // Display divided arrays
        System.out.println("\nFirst Part of the Array:");
        displayArray(firstPart, position);

        System.out.println("\nSecond Part of the Array:");
        displayArray(secondPart, n - position);

        // Check for duplicate elements
        checkForDuplicates(originalArray, n);

    }

    // Helper method to display the elements of an array
    private static void displayArray(int[] array, int count) {
        for (int i = 0; i < count; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

    // Helper method to check for duplicate elements in an array
    private static void checkForDuplicates(int[] array, int n) {
        boolean hasDuplicates = false;

        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (array[i] == array[j]) {
                    hasDuplicates = true;
                    System.out.println("\nDuplicate Element Found: " + array[i]);
                }
            }
        }

        if (!hasDuplicates) {
            System.out.println("\nNo Duplicate Elements Found.");
        }
    }
}



